                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14549 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module cooperative
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Bootstrap
                                     12 	.globl _main
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _threadMask
                                    110 	.globl _threadCount
                                    111 	.globl _currentThread
                                    112 	.globl _sp
                                    113 	.globl _ThreadCreate
                                    114 	.globl _ThreadYield
                                    115 	.globl _ThreadExit
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
                           000034   231 _sp	=	0x0034
                           000038   232 _currentThread	=	0x0038
                           000039   233 _threadCount	=	0x0039
                           00003A   234 _threadMask	=	0x003a
                                    235 ;--------------------------------------------------------
                                    236 ; overlayable items in internal ram
                                    237 ;--------------------------------------------------------
                                    238 	.area	OSEG    (OVR,DATA)
                           00003B   239 _ThreadCreate_newThreadID_10001_12	=	0x003b
                           00003C   240 _ThreadCreate_address_10001_12	=	0x003c
                           00003D   241 _ThreadCreate_SPtemp_10001_12	=	0x003d
                                    242 ;--------------------------------------------------------
                                    243 ; indirectly addressable internal ram data
                                    244 ;--------------------------------------------------------
                                    245 	.area ISEG    (DATA)
                                    246 ;--------------------------------------------------------
                                    247 ; absolute internal ram data
                                    248 ;--------------------------------------------------------
                                    249 	.area IABS    (ABS,DATA)
                                    250 	.area IABS    (ABS,DATA)
                                    251 ;--------------------------------------------------------
                                    252 ; bit data
                                    253 ;--------------------------------------------------------
                                    254 	.area BSEG    (BIT)
                                    255 ;--------------------------------------------------------
                                    256 ; paged external ram data
                                    257 ;--------------------------------------------------------
                                    258 	.area PSEG    (PAG,XDATA)
                                    259 ;--------------------------------------------------------
                                    260 ; uninitialized external ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area XSEG    (XDATA)
                                    263 ;--------------------------------------------------------
                                    264 ; absolute external ram data
                                    265 ;--------------------------------------------------------
                                    266 	.area XABS    (ABS,XDATA)
                                    267 ;--------------------------------------------------------
                                    268 ; initialized external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XISEG   (XDATA)
                                    271 	.area HOME    (CODE)
                                    272 	.area GSINIT0 (CODE)
                                    273 	.area GSINIT1 (CODE)
                                    274 	.area GSINIT2 (CODE)
                                    275 	.area GSINIT3 (CODE)
                                    276 	.area GSINIT4 (CODE)
                                    277 	.area GSINIT5 (CODE)
                                    278 	.area GSINIT  (CODE)
                                    279 	.area GSFINAL (CODE)
                                    280 	.area CSEG    (CODE)
                                    281 ;--------------------------------------------------------
                                    282 ; global & static initialisations
                                    283 ;--------------------------------------------------------
                                    284 	.area HOME    (CODE)
                                    285 	.area GSINIT  (CODE)
                                    286 	.area GSFINAL (CODE)
                                    287 	.area GSINIT  (CODE)
                                    288 ;--------------------------------------------------------
                                    289 ; Home
                                    290 ;--------------------------------------------------------
                                    291 	.area HOME    (CODE)
                                    292 	.area HOME    (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; code
                                    295 ;--------------------------------------------------------
                                    296 	.area CSEG    (CODE)
                                    297 ;------------------------------------------------------------
                                    298 ;Allocation info for local variables in function 'Bootstrap'
                                    299 ;------------------------------------------------------------
                                    300 ;	cooperative.c:69: void Bootstrap(void) {
                                    301 ;	-----------------------------------------
                                    302 ;	 function Bootstrap
                                    303 ;	-----------------------------------------
      000000                        304 _Bootstrap:
                           000007   305 	ar7 = 0x07
                           000006   306 	ar6 = 0x06
                           000005   307 	ar5 = 0x05
                           000004   308 	ar4 = 0x04
                           000003   309 	ar3 = 0x03
                           000002   310 	ar2 = 0x02
                           000001   311 	ar1 = 0x01
                           000000   312 	ar0 = 0x00
                                    313 ;	cooperative.c:82: threadCount = 0;
      000000 75 39 00         [24]  314 	mov	_threadCount,#0x00
                                    315 ;	cooperative.c:83: threadMask = 0;
      000003 75 3A 00         [24]  316 	mov	_threadMask,#0x00
                                    317 ;	cooperative.c:84: currentThread = 0;
      000006 75 38 00         [24]  318 	mov	_currentThread,#0x00
                                    319 ;	cooperative.c:85: currentThread = ThreadCreate(main);
      000009 90r00r00         [24]  320 	mov	dptr,#_main
      00000C 12r00r24         [24]  321 	lcall	_ThreadCreate
      00000F 85 82 38         [24]  322 	mov	_currentThread,dpl
                                    323 ;	cooperative.c:86: RESTORESTATE;
      000012 E5 38            [12]  324 	mov	a,_currentThread
      000014 24 34            [12]  325 	add	a, #_sp
      000016 F9               [12]  326 	mov	r1,a
      000017 87 81            [24]  327 	mov	_SP,@r1
      000019 D0 D0            [24]  328 	POP PSW 
      00001B D0 83            [24]  329 	POP DPH 
      00001D D0 82            [24]  330 	POP DPL 
      00001F D0 F0            [24]  331 	POP B 
      000021 D0 E0            [24]  332 	POP ACC 
                                    333 ;	cooperative.c:87: }
      000023 22               [24]  334 	ret
                                    335 ;------------------------------------------------------------
                                    336 ;Allocation info for local variables in function 'ThreadCreate'
                                    337 ;------------------------------------------------------------
                                    338 ;fp                        Allocated to registers 
                                    339 ;newThreadID               Allocated with name '_ThreadCreate_newThreadID_10001_12'
                                    340 ;address                   Allocated with name '_ThreadCreate_address_10001_12'
                                    341 ;SPtemp                    Allocated with name '_ThreadCreate_SPtemp_10001_12'
                                    342 ;------------------------------------------------------------
                                    343 ;	cooperative.c:95: ThreadID ThreadCreate(FunctionPtr fp) {
                                    344 ;	-----------------------------------------
                                    345 ;	 function ThreadCreate
                                    346 ;	-----------------------------------------
      000024                        347 _ThreadCreate:
                                    348 ;	cooperative.c:101: if (threadCount >= MAXTHREADS){
      000024 74 FC            [12]  349 	mov	a,#0x100 - 0x04
      000026 25 39            [12]  350 	add	a,_threadCount
      000028 50 04            [24]  351 	jnc	00102$
                                    352 ;	cooperative.c:102: return -1;
      00002A 75 82 FF         [24]  353 	mov	dpl, #0xff
      00002D 22               [24]  354 	ret
      00002E                        355 00102$:
                                    356 ;	cooperative.c:146: __data __at (0x3C) char address = 0;
      00002E 75 3C 00         [24]  357 	mov	_ThreadCreate_address_10001_12,#0x00
                                    358 ;	cooperative.c:147: __data __at (0x3D) char SPtemp = 0;
      000031 75 3D 00         [24]  359 	mov	_ThreadCreate_SPtemp_10001_12,#0x00
                                    360 ;	cooperative.c:150: for(newThreadID = 0; newThreadID < MAXTHREADS; newThreadID++){
      000034 75 3B 00         [24]  361 	mov	_ThreadCreate_newThreadID_10001_12,#0x00
      000037                        362 00107$:
      000037 74 FC            [12]  363 	mov	a,#0x100 - 0x04
      000039 25 3B            [12]  364 	add	a,_ThreadCreate_newThreadID_10001_12
      00003B 40 39            [24]  365 	jc	00105$
                                    366 ;	cooperative.c:151: if(!((threadMask >> newThreadID) & 1)){
      00003D 85 3B F0         [24]  367 	mov	b,_ThreadCreate_newThreadID_10001_12
      000040 05 F0            [12]  368 	inc	b
      000042 E5 3A            [12]  369 	mov	a,_threadMask
      000044 80 02            [24]  370 	sjmp	00138$
      000046                        371 00137$:
      000046 C3               [12]  372 	clr	c
      000047 13               [12]  373 	rrc	a
      000048                        374 00138$:
      000048 D5 F0 FB         [24]  375 	djnz	b,00137$
      00004B 20 E0 21         [24]  376 	jb	acc.0,00108$
                                    377 ;	cooperative.c:152: threadMask |= (1 << newThreadID); //a. update the bit mask 
      00004E 85 3B F0         [24]  378 	mov	b,_ThreadCreate_newThreadID_10001_12
      000051 05 F0            [12]  379 	inc	b
      000053 74 01            [12]  380 	mov	a,#0x01
      000055 80 02            [24]  381 	sjmp	00141$
      000057                        382 00140$:
      000057 25 E0            [12]  383 	add	a,acc
      000059                        384 00141$:
      000059 D5 F0 FB         [24]  385 	djnz	b,00140$
      00005C 42 3A            [12]  386 	orl	_threadMask,a
                                    387 ;	cooperative.c:153: threadCount++; //increment threadcount
      00005E E5 39            [12]  388 	mov	a,_threadCount
      000060 04               [12]  389 	inc	a
      000061 F5 39            [12]  390 	mov	_threadCount,a
                                    391 ;	cooperative.c:154: address = (newThreadID * 0x10) + 0x3F; //b. calculate the starting stack location for new thread
      000063 E5 3B            [12]  392 	mov	a,_ThreadCreate_newThreadID_10001_12
      000065 C4               [12]  393 	swap	a
      000066 54 F0            [12]  394 	anl	a,#0xf0
      000068 FF               [12]  395 	mov	r7,a
      000069 24 3F            [12]  396 	add	a,#0x3f
      00006B F5 3C            [12]  397 	mov	_ThreadCreate_address_10001_12,a
                                    398 ;	cooperative.c:155: break;
      00006D 80 07            [24]  399 	sjmp	00105$
      00006F                        400 00108$:
                                    401 ;	cooperative.c:150: for(newThreadID = 0; newThreadID < MAXTHREADS; newThreadID++){
      00006F E5 3B            [12]  402 	mov	a,_ThreadCreate_newThreadID_10001_12
      000071 04               [12]  403 	inc	a
      000072 F5 3B            [12]  404 	mov	_ThreadCreate_newThreadID_10001_12,a
      000074 80 C1            [24]  405 	sjmp	00107$
      000076                        406 00105$:
                                    407 ;	cooperative.c:178: SAVESTATE; 
      000076 C0 E0            [24]  408 	PUSH ACC 
      000078 C0 F0            [24]  409 	PUSH B 
      00007A C0 82            [24]  410 	PUSH DPL 
      00007C C0 83            [24]  411 	PUSH DPH 
      00007E C0 D0            [24]  412 	PUSH PSW 
      000080 E5 38            [12]  413 	mov	a,_currentThread
      000082 24 34            [12]  414 	add	a, #_sp
      000084 F8               [12]  415 	mov	r0,a
      000085 A6 81            [24]  416 	mov	@r0,_SP
                                    417 ;	cooperative.c:179: SPtemp = SP; //c. save the current SP in a temporary
      000087 85 81 3D         [24]  418 	mov	_ThreadCreate_SPtemp_10001_12,_SP
                                    419 ;	cooperative.c:180: SP = address; //set SP to the starting location for the new thread
      00008A 85 3C 81         [24]  420 	mov	_SP,_ThreadCreate_address_10001_12
                                    421 ;	cooperative.c:185: __endasm; 
      00008D C0 82            [24]  422 	PUSH	DPL
      00008F C0 83            [24]  423 	PUSH	DPH
                                    424 ;	cooperative.c:194: __endasm; 
      000091 74 00            [12]  425 	MOV	A, #0
      000093 C0 E0            [24]  426 	PUSH	ACC
      000095 C0 F0            [24]  427 	PUSH	B
      000097 C0 82            [24]  428 	PUSH	DPL
      000099 C0 83            [24]  429 	PUSH	DPH
                                    430 ;	cooperative.c:197: PSW = (newThreadID << 3);
      00009B E5 3B            [12]  431 	mov	a,_ThreadCreate_newThreadID_10001_12
      00009D FF               [12]  432 	mov	r7,a
      00009E C4               [12]  433 	swap	a
      00009F 03               [12]  434 	rr	a
      0000A0 54 F8            [12]  435 	anl	a,#0xf8
      0000A2 F5 D0            [12]  436 	mov	_PSW,a
                                    437 ;	cooperative.c:200: __endasm;
      0000A4 C0 D0            [24]  438 	PUSH	PSW
                                    439 ;	cooperative.c:203: sp[newThreadID] = SP;
      0000A6 E5 3B            [12]  440 	mov	a,_ThreadCreate_newThreadID_10001_12
      0000A8 24 34            [12]  441 	add	a, #_sp
      0000AA F8               [12]  442 	mov	r0,a
      0000AB A6 81            [24]  443 	mov	@r0,_SP
                                    444 ;	cooperative.c:206: SP = SPtemp; 
      0000AD 85 3D 81         [24]  445 	mov	_SP,_ThreadCreate_SPtemp_10001_12
                                    446 ;	cooperative.c:208: RESTORESTATE;
      0000B0 E5 38            [12]  447 	mov	a,_currentThread
      0000B2 24 34            [12]  448 	add	a, #_sp
      0000B4 F9               [12]  449 	mov	r1,a
      0000B5 87 81            [24]  450 	mov	_SP,@r1
      0000B7 D0 D0            [24]  451 	POP PSW 
      0000B9 D0 83            [24]  452 	POP DPH 
      0000BB D0 82            [24]  453 	POP DPL 
      0000BD D0 F0            [24]  454 	POP B 
      0000BF D0 E0            [24]  455 	POP ACC 
                                    456 ;	cooperative.c:210: return newThreadID; //i. finally, return the newly created thread ID.
      0000C1 85 3B 82         [24]  457 	mov	dpl, _ThreadCreate_newThreadID_10001_12
                                    458 ;	cooperative.c:211: }
      0000C4 22               [24]  459 	ret
                                    460 ;------------------------------------------------------------
                                    461 ;Allocation info for local variables in function 'ThreadYield'
                                    462 ;------------------------------------------------------------
                                    463 ;	cooperative.c:219: void ThreadYield(void) {
                                    464 ;	-----------------------------------------
                                    465 ;	 function ThreadYield
                                    466 ;	-----------------------------------------
      0000C5                        467 _ThreadYield:
                                    468 ;	cooperative.c:220: SAVESTATE;
      0000C5 C0 E0            [24]  469 	PUSH ACC 
      0000C7 C0 F0            [24]  470 	PUSH B 
      0000C9 C0 82            [24]  471 	PUSH DPL 
      0000CB C0 83            [24]  472 	PUSH DPH 
      0000CD C0 D0            [24]  473 	PUSH PSW 
      0000CF E5 38            [12]  474 	mov	a,_currentThread
      0000D1 24 34            [12]  475 	add	a, #_sp
      0000D3 F8               [12]  476 	mov	r0,a
      0000D4 A6 81            [24]  477 	mov	@r0,_SP
                                    478 ;	cooperative.c:221: do {
      0000D6                        479 00101$:
                                    480 ;	cooperative.c:232: currentThread = (currentThread + 1) % MAXTHREADS;
      0000D6 AE 38            [24]  481 	mov	r6,_currentThread
      0000D8 7F 00            [12]  482 	mov	r7,#0x00
      0000DA 8E 82            [24]  483 	mov	dpl,r6
      0000DC 8F 83            [24]  484 	mov	dph,r7
      0000DE A3               [24]  485 	inc	dptr
      0000DF 75*00 04         [24]  486 	mov	__modsint_PARM_2,#0x04
      0000E2 8F*01            [24]  487 	mov	(__modsint_PARM_2 + 1),r7
      0000E4 12r00r00         [24]  488 	lcall	__modsint
      0000E7 AE 82            [24]  489 	mov	r6, dpl
      0000E9 AF 83            [24]  490 	mov	r7, dph
      0000EB 8E 38            [24]  491 	mov	_currentThread,r6
                                    492 ;	cooperative.c:233: } while (!((threadMask >> currentThread) & 1));
      0000ED 85 38 F0         [24]  493 	mov	b,_currentThread
      0000F0 05 F0            [12]  494 	inc	b
      0000F2 E5 3A            [12]  495 	mov	a,_threadMask
      0000F4 80 02            [24]  496 	sjmp	00119$
      0000F6                        497 00118$:
      0000F6 C3               [12]  498 	clr	c
      0000F7 13               [12]  499 	rrc	a
      0000F8                        500 00119$:
      0000F8 D5 F0 FB         [24]  501 	djnz	b,00118$
      0000FB 30 E0 D8         [24]  502 	jnb	acc.0,00101$
                                    503 ;	cooperative.c:236: RESTORESTATE;
      0000FE E5 38            [12]  504 	mov	a,_currentThread
      000100 24 34            [12]  505 	add	a, #_sp
      000102 F9               [12]  506 	mov	r1,a
      000103 87 81            [24]  507 	mov	_SP,@r1
      000105 D0 D0            [24]  508 	POP PSW 
      000107 D0 83            [24]  509 	POP DPH 
      000109 D0 82            [24]  510 	POP DPL 
      00010B D0 F0            [24]  511 	POP B 
      00010D D0 E0            [24]  512 	POP ACC 
                                    513 ;	cooperative.c:237: }
      00010F 22               [24]  514 	ret
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'ThreadExit'
                                    517 ;------------------------------------------------------------
                                    518 ;	cooperative.c:244: void ThreadExit(void) {
                                    519 ;	-----------------------------------------
                                    520 ;	 function ThreadExit
                                    521 ;	-----------------------------------------
      000110                        522 _ThreadExit:
                                    523 ;	cooperative.c:251: threadMask = threadMask & ~(1 << currentThread + 1) % (MAXTHREADS);
      000110 E5 38            [12]  524 	mov	a,_currentThread
      000112 04               [12]  525 	inc	a
      000113 FF               [12]  526 	mov	r7,a
      000114 8F F0            [24]  527 	mov	b,r7
      000116 05 F0            [12]  528 	inc	b
      000118 7F 01            [12]  529 	mov	r7,#0x01
      00011A 7E 00            [12]  530 	mov	r6,#0x00
      00011C 80 06            [24]  531 	sjmp	00119$
      00011E                        532 00118$:
      00011E EF               [12]  533 	mov	a,r7
      00011F 2F               [12]  534 	add	a,r7
      000120 FF               [12]  535 	mov	r7,a
      000121 EE               [12]  536 	mov	a,r6
      000122 33               [12]  537 	rlc	a
      000123 FE               [12]  538 	mov	r6,a
      000124                        539 00119$:
      000124 D5 F0 F7         [24]  540 	djnz	b,00118$
      000127 EF               [12]  541 	mov	a,r7
      000128 F4               [12]  542 	cpl	a
      000129 F5 82            [12]  543 	mov	dpl,a
      00012B EE               [12]  544 	mov	a,r6
      00012C F4               [12]  545 	cpl	a
      00012D F5 83            [12]  546 	mov	dph,a
      00012F 75*00 04         [24]  547 	mov	__modsint_PARM_2,#0x04
      000132 75*01 00         [24]  548 	mov	(__modsint_PARM_2 + 1),#0x00
      000135 12r00r00         [24]  549 	lcall	__modsint
      000138 AE 82            [24]  550 	mov	r6, dpl
      00013A AD 3A            [24]  551 	mov	r5,_threadMask
      00013C EE               [12]  552 	mov	a,r6
      00013D 5D               [12]  553 	anl	a,r5
      00013E F5 3A            [12]  554 	mov	_threadMask,a
                                    555 ;	cooperative.c:252: threadCount--;
      000140 E5 39            [12]  556 	mov	a,_threadCount
      000142 14               [12]  557 	dec	a
      000143 F5 39            [12]  558 	mov	_threadCount,a
                                    559 ;	cooperative.c:254: do{
      000145                        560 00101$:
                                    561 ;	cooperative.c:255: currentThread = (currentThread + 1) % (MAXTHREADS-1);
      000145 AE 38            [24]  562 	mov	r6,_currentThread
      000147 7F 00            [12]  563 	mov	r7,#0x00
      000149 8E 82            [24]  564 	mov	dpl,r6
      00014B 8F 83            [24]  565 	mov	dph,r7
      00014D A3               [24]  566 	inc	dptr
      00014E 75*00 03         [24]  567 	mov	__modsint_PARM_2,#0x03
      000151 8F*01            [24]  568 	mov	(__modsint_PARM_2 + 1),r7
      000153 12r00r00         [24]  569 	lcall	__modsint
      000156 AE 82            [24]  570 	mov	r6, dpl
      000158 AF 83            [24]  571 	mov	r7, dph
      00015A 8E 38            [24]  572 	mov	_currentThread,r6
                                    573 ;	cooperative.c:256: } while (!((threadMask >> currentThread) & 1));
      00015C 85 38 F0         [24]  574 	mov	b,_currentThread
      00015F 05 F0            [12]  575 	inc	b
      000161 E5 3A            [12]  576 	mov	a,_threadMask
      000163 80 02            [24]  577 	sjmp	00121$
      000165                        578 00120$:
      000165 C3               [12]  579 	clr	c
      000166 13               [12]  580 	rrc	a
      000167                        581 00121$:
      000167 D5 F0 FB         [24]  582 	djnz	b,00120$
      00016A 30 E0 D8         [24]  583 	jnb	acc.0,00101$
                                    584 ;	cooperative.c:258: RESTORESTATE;
      00016D E5 38            [12]  585 	mov	a,_currentThread
      00016F 24 34            [12]  586 	add	a, #_sp
      000171 F9               [12]  587 	mov	r1,a
      000172 87 81            [24]  588 	mov	_SP,@r1
      000174 D0 D0            [24]  589 	POP PSW 
      000176 D0 83            [24]  590 	POP DPH 
      000178 D0 82            [24]  591 	POP DPL 
      00017A D0 F0            [24]  592 	POP B 
      00017C D0 E0            [24]  593 	POP ACC 
                                    594 ;	cooperative.c:259: }
      00017E 22               [24]  595 	ret
                                    596 	.area CSEG    (CODE)
                                    597 	.area CONST   (CODE)
                                    598 	.area XINIT   (CODE)
                                    599 	.area CABS    (ABS,CODE)
